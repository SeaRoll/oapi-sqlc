// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// BookDTO defines model for BookDTO.
type BookDTO struct {
	Author        string             `json:"author"`
	Id            int                `json:"id"`
	PublishedDate openapi_types.Date `json:"publishedDate"`
	Title         string             `json:"title"`
}

// NewBookDTO defines model for NewBookDTO.
type NewBookDTO struct {
	Author        string             `json:"author" validate:"required,min=1,max=255"`
	PublishedDate openapi_types.Date `json:"publishedDate" validate:"required"`
	Title         string             `json:"title" validate:"required,min=1,max=255"`
}

// PostApiV1BooksJSONRequestBody defines body for PostApiV1Books for application/json ContentType.
type PostApiV1BooksJSONRequestBody = NewBookDTO

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new book
	// (POST /api/v1/books)
	PostApiV1Books(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostApiV1Books converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiV1Books(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiV1Books(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v1/books", wrapper.PostApiV1Books)

}

type PostApiV1BooksRequestObject struct {
	Body *PostApiV1BooksJSONRequestBody
}

type PostApiV1BooksResponseObject interface {
	VisitPostApiV1BooksResponse(w http.ResponseWriter) error
}

type PostApiV1Books201JSONResponse BookDTO

func (response PostApiV1Books201JSONResponse) VisitPostApiV1BooksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create a new book
	// (POST /api/v1/books)
	PostApiV1Books(ctx context.Context, request PostApiV1BooksRequestObject) (PostApiV1BooksResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostApiV1Books operation middleware
func (sh *strictHandler) PostApiV1Books(ctx echo.Context) error {
	var request PostApiV1BooksRequestObject

	var body PostApiV1BooksJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiV1Books(ctx.Request().Context(), request.(PostApiV1BooksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiV1Books")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiV1BooksResponseObject); ok {
		return validResponse.VisitPostApiV1BooksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
